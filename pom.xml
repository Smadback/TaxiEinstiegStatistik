<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>edu.tuc</groupId>
    <artifactId>TaxiEinstiegStatistik</artifactId>
    <version>1.0-SNAPSHOT</version>

    <packaging>jar</packaging>

    <!-- Voraussetzungen für die Mavenversion -->
    <prerequisites>
        <maven>3.0.1</maven>
    </prerequisites>

    <name>TaxiEinstiegStatistik</name>

    <!-- die Properties definieren das Encoding für die Java - Quellcodes , zusätzlich
    wird hier die zu verwendende Java Version festgelegt . Generell empfiehlt es
    sich hier die neuste Version zu setzen
    -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- man kann mit diesen beiden Einstellungen festlegen , in welcher Java Version
                die Quellcodes vorliegen und zu welcher Java Version sie übersetzt werden sollen,
                alle Java Versionen >= 1.2 sind "binär kompatibel", so dass die JRE class - Dateien,
                die in unterschiedlichen Versionen in einem Projekt vorliegen , ausgeführt werden können
                -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <!-- hier werden Abhängigkeiten für das Projekt hinterlegt, passende Pakete können unter http://mvnrepository.com/
            gesucht werden. Wichtig ist der Eintrag von "scope", man setzt darüber, wann das Paket verwendet werden soll.
            Soll das Paket im Programm verwendet werden , wird "compile" angegeben , wird es nur innerhalb der Maven - Tests
            verwendet wird "test" angegeben (es gibt noch andere Möglichkeiten, aber im Rahmen dieser Lehrveranstaltung
            benötigt man diese nicht). Bei "version " wird die zu verwendende Paket-Version gesetzt, hier kann zusätzlich mit []
            bzw . () ein Versionsbereich fest gelegt werden (bei junit wäre hier alles >= der Version 4.12 möglich
            -->
    <dependencies>

        <!-- https://mvnrepository.com/artifact/au.gov.amsa.risky/renjin -->
        <dependency>
            <groupId>au.gov.amsa.risky</groupId>
            <artifactId>renjin</artifactId>
            <version>0.5.3</version>
            <scope>compile</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/junit/junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>[4.12 ,)</version>
            <scope>test</scope>
        </dependency>

    </dependencies>


    <build>
        <!-- hier wird das Default-Goal festgelegt , d.h. welches Goal benutzt werden soll , wenn man Maven ohne Parameter
        (also nur "mvn") ausführt . Generell lohnt es sich "package" zu setzen, im Fall einer ausführbaren Jar, wird dann
        die Jar gebaut, die sich danach im target-Ordner befindet . Zusätzlich wird Maven angewiesen die Abhängigkeiten
        online zu prüfen, so dass am Ende des Bauprozesses eine Liste mit Paketen angegeben wird , die aktualisiert wurden
        -->
        <defaultGoal>package versions:display-dependency-updates versions:display-plugin-updates</defaultGoal>

        <!-- der Resource-Ordner enthält alles, was nicht kompiliert werden muss, z.B. Bilddateien für die UI etc.,
        mit diesem Eintrag werden dann die Daten entsprechend mit in das Jar aufgenommen und zus¨a tzlich werden
        Propertydateien auf Bezeichner wie z.B. ${artifactId} überprüft und diese können dann automatisch
        durch die Werte aus der pom.xml ersetzt werden
        -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <!-- Maven Default Plugins aktualisieren-->
        <pluginManagement>

            <plugins>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.5.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.19.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>

            </plugins>

        </pluginManagement>

        <!-- in dieser Section werden alle Plugins hinterlegt , die für den Buildprozess notwendig sind -->
        <plugins>

            <!-- Compiler Einstellungen , die das Defaultverhalten ¨u berschreiben , so dass hier Warnings und Deprecations
            angezeigt werden . Damit kann man w¨a hrend der Ausf ¨u hrung sehen , wo der Code nicht ordentlich geschrieben
            wurde . Generell sollte man diese Einstellungen ernst nehmen und fixen
            -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>

            <!-- Clean ist ein Plugin , das speziell f¨ur das Goal " mvn clean " genutzt werden kann , um temporäre
            Dateien zu löschen. Per Default löscht Maven den vollständigen "target" Ordner, je nach Bauprozess sind aber
            noch andere Dateien im Verzeichnis vorhanden z.B. legt das Shade-Plugin eine "dependency-reduced-pom.xml" an.
            Entsprechend über den Eintrag "fileset" können Dateien explizit zum Löschen eingeschlossen oder ausgeschlossen
            werden
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>.</directory>
                            <includes>
                                <include>dependency-reduced-pom.xml</include>
                            </includes>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <!-- Shade-Plugin erzeugt eine ausführbare Datei mit allen Abhängigkeiten, so dass die erzeugte Jar direkt
            ausgeführt werden kann. Dieses Plugin bietet eine Vielzahl an Einstellungen, für die einfache Verwendung
            ist es ausreichend, dass hier in dem Goal "package" das Plugin ausgeführt wird und bei "Main-Class" die
            Klasse mit der main-Methode angegeben wird
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.4.3</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <!-- hier muss die Klasse mit der "public static void main ( final String [] p_args )" mit
                                        vollständigen Namen (Paket + Klassenname ) angegeben werden z.B. myproject.CMain
                                        -->
                                        <Main-Class>edu.tuc.taxieinstiegstatistik.TaxiEinstiegStatistik</Main-Class>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
